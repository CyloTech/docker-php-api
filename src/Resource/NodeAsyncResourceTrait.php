<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Resource;

trait NodeAsyncResourceTrait
{
    /**
     * @param array $queryParameters {
     *
     *     @var string $filters filters to process on the nodes list, encoded as JSON (a `map[string][]string`)

     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NodeListInternalServerErrorException
     * @throws \Docker\API\Exception\NodeListServiceUnavailableException
     *
     * @return null|\Docker\API\Model\Node[]|\Amp\Artax\Response
     */
    public function nodeList(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NodeList($queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $id              The ID or name of the node
     * @param array  $queryParameters {
     *
     *     @var bool $force Force remove a node from the swarm
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NodeDeleteNotFoundException
     * @throws \Docker\API\Exception\NodeDeleteInternalServerErrorException
     * @throws \Docker\API\Exception\NodeDeleteServiceUnavailableException
     *
     * @return null|\Amp\Artax\Response
     */
    public function nodeDelete(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NodeDelete($id, $queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $id    The ID or name of the node
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NodeInspectNotFoundException
     * @throws \Docker\API\Exception\NodeInspectInternalServerErrorException
     * @throws \Docker\API\Exception\NodeInspectServiceUnavailableException
     *
     * @return null|\Docker\API\Model\Node|\Amp\Artax\Response
     */
    public function nodeInspect(string $id, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NodeInspect($id);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string                     $id              The ID of the node
     * @param \Docker\API\Model\NodeSpec $body
     * @param array                      $queryParameters {
     *
     *     @var int $version The version number of the node object being updated. This is required to avoid conflicting writes.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NodeUpdateBadRequestException
     * @throws \Docker\API\Exception\NodeUpdateNotFoundException
     * @throws \Docker\API\Exception\NodeUpdateInternalServerErrorException
     * @throws \Docker\API\Exception\NodeUpdateServiceUnavailableException
     *
     * @return null|\Amp\Artax\Response
     */
    public function nodeUpdate(string $id, \Docker\API\Model\NodeSpec $body, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NodeUpdate($id, $body, $queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }
}
