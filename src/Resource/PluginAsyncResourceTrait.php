<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Resource;

trait PluginAsyncResourceTrait
{
    /**
     * Returns information about installed plugins.
     *
     * @param array $queryParameters {
     *
     *     @var string $filters A JSON encoded value of the filters (a `map[string][]string`) to process on the plugin list. Available filters:

     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginListInternalServerErrorException
     *
     * @return null|\Docker\API\Model\Plugin[]|\Amp\Artax\Response
     */
    public function pluginList(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginList($queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     *     @var string $remote The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\GetPluginPrivilegesInternalServerErrorException
     *
     * @return null|\Docker\API\Model\PluginsPrivilegesGetResponse200Item[]|\Amp\Artax\Response
     */
    public function getPluginPrivileges(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\GetPluginPrivileges($queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).

     *
     * @param array $body
     * @param array $queryParameters {
     *
     *     @var string $remote remote reference for plugin to install

     *     @var string $name local name for the pulled plugin

    The `:latest` tag is optional, and is used as the default if omitted.

     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $X-Registry-Auth A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginPullInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function pluginPull(array $body, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginPull($body, $queryParameters, $headerParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $name  The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginInspectNotFoundException
     * @throws \Docker\API\Exception\PluginInspectInternalServerErrorException
     *
     * @return null|\Docker\API\Model\Plugin|\Amp\Artax\Response
     */
    public function pluginInspect(string $name, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginInspect($name);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $name            The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * @param array  $queryParameters {
     *
     *     @var bool $force Disable the plugin before removing. This may result in issues if the plugin is in use by a container.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginDeleteNotFoundException
     * @throws \Docker\API\Exception\PluginDeleteInternalServerErrorException
     *
     * @return null|\Docker\API\Model\Plugin|\Amp\Artax\Response
     */
    public function pluginDelete(string $name, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginDelete($name, $queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $name            The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * @param array  $queryParameters {
     *
     *     @var int $timeout Set the HTTP client timeout (in seconds)
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginEnableNotFoundException
     * @throws \Docker\API\Exception\PluginEnableInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function pluginEnable(string $name, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginEnable($name, $queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $name  The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginDisableNotFoundException
     * @throws \Docker\API\Exception\PluginDisableInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function pluginDisable(string $name, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginDisable($name);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $name            The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * @param array  $body
     * @param array  $queryParameters {
     *
     *     @var string $remote remote reference to upgrade to

    The `:latest` tag is optional, and is used as the default if omitted.

     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $X-Registry-Auth A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginUpgradeNotFoundException
     * @throws \Docker\API\Exception\PluginUpgradeInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function pluginUpgrade(string $name, array $body, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginUpgrade($name, $body, $queryParameters, $headerParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $tarContext      Path to tar containing plugin rootfs and manifest
     * @param array  $queryParameters {
     *
     *     @var string $name The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginCreateInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function pluginCreate(string $tarContext, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginCreate($tarContext, $queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * Push a plugin to the registry.
     *
     * @param string $name  The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginPushNotFoundException
     * @throws \Docker\API\Exception\PluginPushInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function pluginPush(string $name, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginPush($name);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $name  The name of the plugin. The `:latest` tag is optional, and is the default if omitted.
     * @param array  $body
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\PluginSetNotFoundException
     * @throws \Docker\API\Exception\PluginSetInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function pluginSet(string $name, array $body, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\PluginSet($name, $body);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }
}
