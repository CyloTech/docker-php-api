<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Resource;

trait NetworkAsyncResourceTrait
{
    /**
     * Returns a list of networks. For details on the format, see [the network inspect endpoint](#operation/NetworkInspect).

    Note that it uses a different, smaller representation of a network than inspecting a single network. For example,
    the list of containers attached to the network is not propagated in API versions 1.28 and up.

     *
     * @param array $queryParameters {
     *
     *     @var string $filters JSON encoded value of the filters (a `map[string][]string`) to process on the networks list. Available filters:

     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NetworkListInternalServerErrorException
     *
     * @return null|\Docker\API\Model\Network[]|\Amp\Artax\Response
     */
    public function networkList(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NetworkList($queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $id    Network ID or name
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NetworkDeleteForbiddenException
     * @throws \Docker\API\Exception\NetworkDeleteNotFoundException
     * @throws \Docker\API\Exception\NetworkDeleteInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function networkDelete(string $id, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NetworkDelete($id);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $id              Network ID or name
     * @param array  $queryParameters {
     *
     *     @var bool $verbose Detailed inspect output for troubleshooting
     *     @var string $scope Filter the network by scope (swarm, global, or local)
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NetworkInspectNotFoundException
     * @throws \Docker\API\Exception\NetworkInspectInternalServerErrorException
     *
     * @return null|\Docker\API\Model\Network|\Amp\Artax\Response
     */
    public function networkInspect(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NetworkInspect($id, $queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param \Docker\API\Model\NetworksCreatePostBody $networkConfig Network configuration
     * @param string                                   $fetch         Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NetworkCreateForbiddenException
     * @throws \Docker\API\Exception\NetworkCreateNotFoundException
     * @throws \Docker\API\Exception\NetworkCreateInternalServerErrorException
     *
     * @return null|\Docker\API\Model\NetworksCreatePostResponse201|\Amp\Artax\Response
     */
    public function networkCreate(\Docker\API\Model\NetworksCreatePostBody $networkConfig, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NetworkCreate($networkConfig);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string                                      $id        Network ID or name
     * @param \Docker\API\Model\NetworksIdConnectPostBody $container
     * @param string                                      $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NetworkConnectForbiddenException
     * @throws \Docker\API\Exception\NetworkConnectNotFoundException
     * @throws \Docker\API\Exception\NetworkConnectInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function networkConnect(string $id, \Docker\API\Model\NetworksIdConnectPostBody $container, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NetworkConnect($id, $container);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string                                         $id        Network ID or name
     * @param \Docker\API\Model\NetworksIdDisconnectPostBody $container
     * @param string                                         $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NetworkDisconnectForbiddenException
     * @throws \Docker\API\Exception\NetworkDisconnectNotFoundException
     * @throws \Docker\API\Exception\NetworkDisconnectInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function networkDisconnect(string $id, \Docker\API\Model\NetworksIdDisconnectPostBody $container, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NetworkDisconnect($id, $container);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     *     @var string $filters filters to process on the prune list, encoded as JSON (a `map[string][]string`)

     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\NetworkPruneInternalServerErrorException
     *
     * @return null|\Docker\API\Model\NetworksPrunePostResponse200|\Amp\Artax\Response
     */
    public function networkPrune(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\NetworkPrune($queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }
}
