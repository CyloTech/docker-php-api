<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Resource;

trait SystemAsyncResourceTrait
{
    /**
     * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password.
     *
     * @param \Docker\API\Model\AuthConfig $authConfig Authentication to check
     * @param string                       $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\SystemAuthInternalServerErrorException
     *
     * @return null|\Docker\API\Model\AuthPostResponse200|\Amp\Artax\Response
     */
    public function systemAuth(\Docker\API\Model\AuthConfig $authConfig, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\SystemAuth($authConfig);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\SystemInfoInternalServerErrorException
     *
     * @return null|\Docker\API\Model\SystemInfo|\Amp\Artax\Response
     */
    public function systemInfo(string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\SystemInfo();

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\SystemVersionInternalServerErrorException
     *
     * @return null|\Docker\API\Model\VersionGetResponse200|\Amp\Artax\Response
     */
    public function systemVersion(string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\SystemVersion();

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\SystemPingInternalServerErrorException
     *
     * @return null|\Amp\Artax\Response
     */
    public function systemPing(string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\SystemPing();

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * Stream real-time events from the server.

    Various objects within Docker report events when something happens to them.

    Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, and `update`

    Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, and `untag`

    Volumes report these events: `create`, `mount`, `unmount`, and `destroy`

    Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, and `remove`

    The Docker daemon reports these events: `reload`

    Services report these events: `create`, `update`, and `remove`

    Nodes report these events: `create`, `update`, and `remove`

    Secrets report these events: `create`, `update`, and `remove`

    Configs report these events: `create`, `update`, and `remove`

     *
     * @param array $queryParameters {
     *
     *     @var string $since show events created since this timestamp then stream new events
     *     @var string $until show events created until this timestamp then stop streaming
     *     @var string $filters A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:

     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\SystemEventsBadRequestException
     * @throws \Docker\API\Exception\SystemEventsInternalServerErrorException
     *
     * @return null|\Docker\API\Model\EventsGetResponse200|\Amp\Artax\Response
     */
    public function systemEvents(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\SystemEvents($queryParameters);

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\SystemDataUsageInternalServerErrorException
     *
     * @return null|\Docker\API\Model\SystemDfGetResponse200|\Amp\Artax\Response
     */
    public function systemDataUsage(string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\SystemDataUsage();

        return $this->executeArtaxEndpoint($endpoint, $fetch);
    }
}
