<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Resource;

trait ConfigResourceTrait
{
    /**
     * @param array $queryParameters {
     *
     *     @var string $filters A JSON encoded value of the filters (a `map[string][]string`) to process on the configs list. Available filters:

     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ConfigListInternalServerErrorException
     * @throws \Docker\API\Exception\ConfigListServiceUnavailableException
     *
     * @return null|\Docker\API\Model\Config[]|\Psr\Http\Message\ResponseInterface
     */
    public function configList(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ConfigList($queryParameters);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }

    /**
     * @param \Docker\API\Model\ConfigsCreatePostBody $body
     * @param string                                  $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ConfigCreateConflictException
     * @throws \Docker\API\Exception\ConfigCreateInternalServerErrorException
     * @throws \Docker\API\Exception\ConfigCreateServiceUnavailableException
     *
     * @return null|\Docker\API\Model\ConfigsCreatePostResponse201|\Psr\Http\Message\ResponseInterface
     */
    public function configCreate(\Docker\API\Model\ConfigsCreatePostBody $body, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ConfigCreate($body);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }

    /**
     * @param string $id    ID of the config
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ConfigDeleteNotFoundException
     * @throws \Docker\API\Exception\ConfigDeleteInternalServerErrorException
     * @throws \Docker\API\Exception\ConfigDeleteServiceUnavailableException
     *
     * @return null|\Psr\Http\Message\ResponseInterface
     */
    public function configDelete(string $id, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ConfigDelete($id);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }

    /**
     * @param string $id    ID of the config
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ConfigInspectNotFoundException
     * @throws \Docker\API\Exception\ConfigInspectInternalServerErrorException
     * @throws \Docker\API\Exception\ConfigInspectServiceUnavailableException
     *
     * @return null|\Docker\API\Model\Config|\Psr\Http\Message\ResponseInterface
     */
    public function configInspect(string $id, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ConfigInspect($id);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }

    /**
     * @param string                       $id              The ID or name of the config
     * @param \Docker\API\Model\ConfigSpec $body            The spec of the config to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [ConfigInspect endpoint](#operation/ConfigInspect) response values.
     * @param array                        $queryParameters {
     *
     *     @var int $version The version number of the config object being updated. This is required to avoid conflicting writes.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ConfigUpdateBadRequestException
     * @throws \Docker\API\Exception\ConfigUpdateNotFoundException
     * @throws \Docker\API\Exception\ConfigUpdateInternalServerErrorException
     * @throws \Docker\API\Exception\ConfigUpdateServiceUnavailableException
     *
     * @return null|\Psr\Http\Message\ResponseInterface
     */
    public function configUpdate(string $id, \Docker\API\Model\ConfigSpec $body, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ConfigUpdate($id, $body, $queryParameters);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }
}
